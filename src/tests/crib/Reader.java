package tests.crib;

public class Reader {
    /*
Класс BufferedReader, как видно из его названия, является классом-наследником от Reader и позволяет читать символы.
Однако, что самое интересное, в качестве источника данных в него тоже нужно передать поток,
из которого можно читать символы – поток-наследник от класса Reader.


int read()                  Читает один char из потока
int read(char[] buffer)     Читает массив char’ов из потока
long skip(long n)           Пропускает n char’ов в потоке (читает и выбрасывает)
boolean ready()             Проверяет, что в потоке еще что-то осталось
void close()                Закрывает поток
-----------------------------------------------------------------------------------
Метод int read()
        Это метод читает из потока один char и возвращает его.
        Тип char расширяется до типа int, но первые два байта результата всегда нули.
-----------------------------------------------------------------------------------
Метод int read(char[] buffer)
        Это вторая модификация метода read(). Он позволяет считать из Reader сразу массив символов.
        Массив для символов нужно передать в качестве параметра.
        Метод возвращает число — количество реально прочитанных символов.
-----------------------------------------------------------------------------------
Метод skip(long n)
        Этот метод позволяет пропустить n первых символов из объекта Reader.
        Работает точно так же, как аналогичный метод класса InputStream.
        Возвращает число символов, которые были реально пропущены.
-----------------------------------------------------------------------------------
Метод boolean ready()
        Возвращает true, если в потоке есть еще не прочитанные байты.
-----------------------------------------------------------------------------------
Метод void close()
        Метод close() закрывает поток данных и освобождает связанные с ним внешние ресурсы.
        После закрытия потока данные из него читать больше нельзя.
-----------------------------------------------------------------------------------

     */
}
