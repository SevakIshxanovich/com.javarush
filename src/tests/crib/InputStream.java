package tests.crib;

public class InputStream {
    /*
    Методы	Описание
int read()                  Читает один байт из потока
int read(byte[] buffer)     Читает массив байт из потока
byte[] readAllBytes()       Читает все байты из потока
long skip(long n)           Пропускает n байт в потоке (читает и выкидывает)
int available()             Проверяет, сколько байт еще осталось в потоке
void close()                Закрывает поток


Метод read()
                читает один байт из потока и возвращает его. Вас может сбить тип результата — int,
                однако так было сделано, потому что тип int — это стандарт всех целых чисел.
                Три первые байта типа int будут равны нулю.

Метод read(byte[] buffer)
                 Это вторая модификация метода read(). Он позволяет считать из InputStream сразу массив байт.
                 Массив для сохранения байт нужно передать в качестве параметра.
                 Метод возвращает число — количество реально прочитанных байт.

                Допустим у вас буфер на 10 килобайт, и вы читаете данные из файла с помощью класса FileInputStream.
                Если файл содержит всего 2 килобайта, все данные будут помещены в массив-буфер,
                а метод вернет число 2048 (2 килобайта).

Метод readAllBytes()
                Очень хороший метод. Просто считывает все данные из InputStream, пока они не закончатся,
                и возвращает их виде единого массива байт. Очень удобен для чтения небольших файлов.
                Большие файлы могут физически не поместиться в память, и метод кинет исключение.

Метод skip(long n)
                        Этот метод позволяет пропустить n первых байт из объекта InputStream.
                        Поскольку данные читаются строго последовательно,
                        этот метод просто вычитывает n первых байт из потока и выбрасывает их.

                        Возвращает число байт, которые были реально пропущены
                        (если поток закончился раньше, чем прокрутили n байт).

Метод int available()
                        Метод возвращает количество байт, которое еще осталось в потоке

Метод void close()
                        Метод close() закрывает поток данных и освобождает связанные с ним внешние ресурсы.
                        После закрытия потока данные из него читать больше нельзя.

     */
}
