package tests.crib.Strings;

public class StringFormatter {

    /*
    У класса String есть статический метод format(): он позволяет задать шаблон объединения строки с данными.

            Общий вид этой команды такой:

    String имя = String.format(шаблон, параметры);

    Вот краткий список параметров, которые можно использовать внутри шаблона:

Символ	Обозначение
%s  String
%d  целое число: byte, short, int, long
%f  вещественное число: float, double
%b  boolean
%c  char
%t  Date
%%  Символ %

Чтобы взять параметр по его номеру (нумерация начинается с единицы), нужно записать %1$d вместо %d. Пример:

    Код	                                                                        Результат
String s = String.format("a=%3$d, b=%2$d, c=%d", 11, 12, 13);           s будет равна "a=13, b=12, c=11"
-------------------------------------------------------------------------------------------------------------
Помимо строк и чисел с плавающей запятой, в Java есть и другие типы, не так ли? Поэтому давайте взглянем на весь арсенал:
Тип     форматируемого значения	                            Пример
%s	Любой тип, который будет приведен к строке          String.format("Привет %s!","мир")
                                                        Результат:
                                                        Привет мир!

%b	Любой тип, который будет приведен к boolean:        String.format("Привет %b!",null)
    true — если значение не null, false — если null     Результат:
                                                        Привет false

%h	Можно передавать любой объект,                      String.format("Привет %h!","мир")
    который будет приведен к шестнадцатеричной          Результат:
    строке значения из метода hashCode ()               Привет 106c44!

%c	Используется для задания символа Unicode (char)     String.format("Привет м%cр!",'и')
                                                        Результат:
                                                        Привет мир!

%d	Задается целое число                                String.format("Мне уже %d!",20)
    (int. byte, short, int, long, BigInteger)           Результат:
                                                        Мне уже 20!

%f	Используется для задания числа с плавающей запятой  String.format("Число ПИ равно -  %f!", 3.14159)
                                                        Результат:
                                                        Число ПИ равно - 3,141590!

%e	Числа с плавающей запятой в                         String.format("Число ПИ равно -  %e!", 3.14159);
    экспоненциальном представлении                      Результат:
                                                        Число ПИ равно - 3,141590e+00!

%a	Числа с плавающей запятой будут                     String.format("Число ПИ равно -  %a!", 3.14159)
    представлены в шестнадцатеричном виде               Результат:
                                                        Число ПИ равно - 0x1.921f9f01b866ep1!

%x	Передается целое число                              String.format("Мне уже %x!",25)
    (int. byte, short, int, long, BigInteger),          Результат:
    результатом форматирования будет символ             Мне уже 19!
    под данным номером в таблице ASCII

%o	Принимается целое число                             String.format("Мне уже %o!",25);
    (int. byte, short, int, long, BigInteger),          Результат:
    которое будет представлено в                        Мне уже 31!
    виде восьмеричного числа

%t	Префикс для преобразований даты и времени.          String.format("Сегодня %tA",new Date())
    Для форматирования требуются дополнительные флаги   Результат:
                                                        Сегодня суббота

%n	Разделитель строк для конкретной платформы.         String.format(" Привет %n Привет")
    Аналог \n                                           Результат:
                                                        Привет Привет

-----------------------------------------------------------------------------------------------------------
Вот возможные флаги форматирования для дат:
Флаги	Описание
%tB	Полное название месяца, например, January, February и т.д.
%tb	Сокращенное название месяца, например, Jan, Feb и т.д.
%tA	Полное название дня недели, например, Sunday, Monday
%ta	Сокращенное название дня недели, например, Sun, Mon и т.д.
%tY	Год в формате 4 цифры, например, от 0000 до 9999
%ty	Год в формате 2 цифры, например, от 00 до 99
%tm	Месяц отформатирован с нуля в начале, например, от 01 до 12
%tc	Дата и время в формате %ta %tb %td %tT %tZ %tY, например, Mon Feb 17 03:56:12 PST 2020
%tD	Дата в формате %tm/%td/%ty
%td	День месяца в формате двух цифр, например, от 01 до 31
%te	День месяца в формате без 0 в начале, например от 1 до 31
%tT	Время в 24-часовом формате, например, %tH:%tM:%tS
%tH	Час дня в 24-часовом формате, от 00 до 23
%tI	Час дня для 12-часового формата, например, от 01 до 12
%tM	Минуты в часе форматируются с нуля в начале, например, от 00 до 59
%tS	Секунды в минуте, состоящие из двух цифр, например, от 00 до 59
%tZ	Аббревиатура часового пояса, например, PST, UTC и т.д.
-----------------------------------------------------------------------------------------------------------
String str = String.format("Привет - %s! Как дела %s?", "Саша", "на работе");
System.out.println(str);
---------------------------------------------------------------------------------
String.format() — не единственный метод для форматирования строки.
Его аналогами могут служить System.out.printf() и System.out.format();

System.out.printf("Привет - %s! Как дела %s?", "Саша", "на работе");
или
System.out.format("Привет - %s! Как дела %s?", "Саша", "на работе");
--------------------------------------------------------------------------------------------------------------
     */
}
